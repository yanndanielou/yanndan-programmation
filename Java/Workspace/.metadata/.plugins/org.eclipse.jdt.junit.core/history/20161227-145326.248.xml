<?xml version="1.0" encoding="UTF-8"?><testrun name="JIntegerNaturalNumberTest" project="Numbers" tests="23" started="23" failures="0" errors="2" ignored="5">
  <testsuite name="test.numbers.JIntegerNaturalNumberTest" time="0.1">
    <testsuite name="test.numbers.JIntegerNaturalNumberTest.Comparison" time="0.0">
      <testsuite name="test.numbers.JIntegerNaturalNumberTest.Comparison.Equal" time="0.0">
        <testcase name="oneAndTenAreNotEqual" classname="test.numbers.JIntegerNaturalNumberTest.Comparison.Equal" time="0.0"/>
        <testcase name="tenAndTwentyAreNotEqual" classname="test.numbers.JIntegerNaturalNumberTest.Comparison.Equal" time="0.0"/>
        <testcase name="sameNumberAreEquals" classname="test.numbers.JIntegerNaturalNumberTest.Comparison.Equal" time="0.0"/>
      </testsuite>
    </testsuite>
    <testsuite name="test.numbers.JIntegerNaturalNumberTest.Constructors" time="0.01">
      <testcase name="intAndListOfBytesConstructorsReturnSameNumber" classname="test.numbers.JIntegerNaturalNumberTest.Constructors" time="0.01"/>
    </testsuite>
    <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder" time="0.09">
      <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors" time="0.09">
        <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors" time="0.01">
          <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0">
            <testcase name="of_10_000_are_2_2_2_2_5_5_5_5" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0" ignored="true"/>
            <testcase name="of_2003_hasNoDivisor" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0" ignored="true"/>
            <testcase name="of_24001_hasNoDivisor" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0" ignored="true"/>
            <testcase name="of_11003_hasNoDivisor" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0" ignored="true"/>
            <testcase name="of_49999_hasNoDivisor" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.PerfTests" time="0.0" ignored="true"/>
          </testsuite>
          <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.TestResult" time="0.01">
            <testcase name="of_0_is_empty" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.TestResult" time="0.0">
              <error>java.lang.IllegalStateException: only prime divisors up to 7 are supported&#13;
	at main.numbers.JIntegerNaturalNumber.getAllPrimeDivisors(JIntegerNaturalNumber.java:181)&#13;
	at test.numbers.JIntegerNaturalNumberTest$DivisorsFinder$PrimeDivisors$AllPrimeDivisors.computeAndCheck(JIntegerNaturalNumberTest.java:159)&#13;
	at test.numbers.JIntegerNaturalNumberTest$DivisorsFinder$PrimeDivisors$AllPrimeDivisors$TestResult.after(JIntegerNaturalNumberTest.java:167)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:83)&#13;
	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:57)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
            </testcase>
            <testcase name="of_10_are_2_5" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.TestResult" time="0.01"/>
            <testcase name="of_6_are_2_3" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.TestResult" time="0.0"/>
            <testcase name="of_20_are_2_2_5" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.AllPrimeDivisors.TestResult" time="0.0">
              <error>java.lang.IllegalStateException: only prime divisors up to 7 are supported&#13;
	at main.numbers.JIntegerNaturalNumber.getAllPrimeDivisors(JIntegerNaturalNumber.java:181)&#13;
	at test.numbers.JIntegerNaturalNumberTest$DivisorsFinder$PrimeDivisors$AllPrimeDivisors.computeAndCheck(JIntegerNaturalNumberTest.java:159)&#13;
	at test.numbers.JIntegerNaturalNumberTest$DivisorsFinder$PrimeDivisors$AllPrimeDivisors$TestResult.after(JIntegerNaturalNumberTest.java:167)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:83)&#13;
	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:57)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26)&#13;
	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15)&#13;
	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38)&#13;
	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27)&#13;
	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28)&#13;
	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
            </testcase>
          </testsuite>
        </testsuite>
        <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors" time="0.08">
          <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.08">
            <testcase name="for_16_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.0"/>
            <testcase name="for_20_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.0"/>
            <testcase name="for_22_returns_false" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.0"/>
            <testcase name="for_10_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.0"/>
            <testcase name="for_9_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult" time="0.07"/>
            <testsuite name="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.01">
              <testcase name="for_2048_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.01"/>
              <testcase name="for_2power24_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.0"/>
              <testcase name="for_2053_returns_false" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.0"/>
              <testcase name="for_2power20_returns_true" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.0"/>
              <testcase name="for_49999_returns_false" classname="test.numbers.JIntegerNaturalNumberTest.DivisorsFinder.PrimeDivisors.HasOnlyOneDigitPrimeDivisors.TestResult.PerfTests" time="0.0"/>
            </testsuite>
          </testsuite>
        </testsuite>
      </testsuite>
    </testsuite>
  </testsuite>
</testrun>
