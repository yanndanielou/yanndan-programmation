
[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install sampleproject
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "shutthebox" # REQUIRED, is the only field that cannot be marked as dynamic.

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
version = "0.0.0" # REQUIRED, although can be dynamic

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "Shut the boxs"

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers in this file, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
#requires-python = ">=3.9"

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

[tool.pylint.'MESSAGES CONTROL']
[tool.pylint]
disable = ["C0114", "C0115", "C0116"]  # Désactivation de certaines règles
#missing-function-docstring
#missing-module-docstring
#Missing class docstringPylintC0115:missing-class-docstring
max-line-length = 150

[tool.mypy]
# Disallow functions or methods without type annotations
disallow_untyped_defs = true
# Disallow calls to functions or methods without type annotations
disallow_untyped_calls = true
# Enforce type annotations for partially defined functions
disallow_incomplete_defs = true
# Check untyped function definitions even if they are not called
check_untyped_defs = true
# Warn if a function returns a value of type "Any"
warn_return_any = true
# Ignore missing imports (useful for third-party libraries without type hints)
ignore_missing_imports = true
# Warn if configurations are defined but unused
warn_unused_configs = true
# Enable strict checks for optional types (e.g., Optional[str])
strict_optional = true
# Warn about redundant type casts
warn_redundant_casts = true
# Warn about unnecessary "type: ignore" comments
warn_unused_ignores = true


[tool.black]
line-length = 200
